// <auto-generated />
using System;
using EfCoreRelation.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EfCoreRelation.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20231216183002_Employee Details")]
    partial class EmployeeDetails
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EfCoreRelation.Entity.AccademicQualificationDetails.AccademicQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("accademicQualifications");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.AccademicQualificationDetails.AcQualifOne", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccdmQlfId")
                        .HasColumnType("int");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassingYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Result")
                        .HasColumnType("float");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccdmQlfId");

                    b.ToTable("acQualifOnes");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.AccademicQualificationDetails.AcQualifThree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccdmQlfId")
                        .HasColumnType("int");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassingYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Result")
                        .HasColumnType("float");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccdmQlfId");

                    b.ToTable("acQualifThrees");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.AccademicQualificationDetails.AcQualifTwo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccdmQlfId")
                        .HasColumnType("int");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassingYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Result")
                        .HasColumnType("float");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccdmQlfId");

                    b.ToTable("acQualifTwos");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.Address.EmployeeAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("employeeAddresses");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.Address.ParmanentAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeAddressId")
                        .HasColumnType("int");

                    b.Property<string>("PoliceStation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostOffice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Village")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeAddressId");

                    b.ToTable("parmanentAddresses");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.Address.PresentAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeAddressId")
                        .HasColumnType("int");

                    b.Property<string>("PoliceStation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostOffice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Village")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeAddressId");

                    b.ToTable("presentAddresses");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.Employees.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppliedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppliedPost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpectedSelary")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InterviewDare")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.WorkExpreanceDetails.ExperienceFive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DefaultProduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Post")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportingTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Selary")
                        .HasColumnType("int");

                    b.Property<int>("WorkExperienceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkExperienceId");

                    b.ToTable("experienceFives");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.WorkExpreanceDetails.ExperienceFour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DefaultProduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Post")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportingTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Selary")
                        .HasColumnType("int");

                    b.Property<int>("WorkExperienceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkExperienceId");

                    b.ToTable("experienceFours");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.WorkExpreanceDetails.ExperienceOne", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DefaultProduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Post")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportingTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Selary")
                        .HasColumnType("int");

                    b.Property<int>("WorkExperienceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkExperienceId");

                    b.ToTable("experienceOnes");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.WorkExpreanceDetails.ExperienceThree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DefaultProduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Post")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportingTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Selary")
                        .HasColumnType("int");

                    b.Property<int>("WorkExperienceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkExperienceId");

                    b.ToTable("experienceThrees");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.WorkExpreanceDetails.ExperienceTwo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DefaultProduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Post")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportingTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Selary")
                        .HasColumnType("int");

                    b.Property<int>("WorkExperienceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkExperienceId");

                    b.ToTable("experienceTwos");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.WorkExpreanceDetails.WorkExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("workExperiences");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.AccademicQualificationDetails.AccademicQualification", b =>
                {
                    b.HasOne("EfCoreRelation.Entity.Employees.Employee", "employee")
                        .WithMany("accademicQualifications")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.AccademicQualificationDetails.AcQualifOne", b =>
                {
                    b.HasOne("EfCoreRelation.Entity.AccademicQualificationDetails.AccademicQualification", "accademicQualification")
                        .WithMany("acQualifOnes")
                        .HasForeignKey("AccdmQlfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("accademicQualification");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.AccademicQualificationDetails.AcQualifThree", b =>
                {
                    b.HasOne("EfCoreRelation.Entity.AccademicQualificationDetails.AccademicQualification", "accademicQualification")
                        .WithMany("acQualifThrees")
                        .HasForeignKey("AccdmQlfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("accademicQualification");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.AccademicQualificationDetails.AcQualifTwo", b =>
                {
                    b.HasOne("EfCoreRelation.Entity.AccademicQualificationDetails.AccademicQualification", "accademicQualification")
                        .WithMany("acQualifTwos")
                        .HasForeignKey("AccdmQlfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("accademicQualification");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.Address.EmployeeAddress", b =>
                {
                    b.HasOne("EfCoreRelation.Entity.Employees.Employee", "employee")
                        .WithMany("employeeAddresses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.Address.ParmanentAddress", b =>
                {
                    b.HasOne("EfCoreRelation.Entity.Address.EmployeeAddress", "employeeAddress")
                        .WithMany("parmanentAddresses")
                        .HasForeignKey("EmployeeAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employeeAddress");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.Address.PresentAddress", b =>
                {
                    b.HasOne("EfCoreRelation.Entity.Address.EmployeeAddress", "employeeAddress")
                        .WithMany("presentAddresses")
                        .HasForeignKey("EmployeeAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employeeAddress");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.WorkExpreanceDetails.ExperienceFive", b =>
                {
                    b.HasOne("EfCoreRelation.Entity.WorkExpreanceDetails.WorkExperience", "workExperience")
                        .WithMany("experienceFives")
                        .HasForeignKey("WorkExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("workExperience");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.WorkExpreanceDetails.ExperienceFour", b =>
                {
                    b.HasOne("EfCoreRelation.Entity.WorkExpreanceDetails.WorkExperience", "workExperience")
                        .WithMany("experienceFours")
                        .HasForeignKey("WorkExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("workExperience");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.WorkExpreanceDetails.ExperienceOne", b =>
                {
                    b.HasOne("EfCoreRelation.Entity.WorkExpreanceDetails.WorkExperience", "workExperience")
                        .WithMany("experienceOnes")
                        .HasForeignKey("WorkExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("workExperience");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.WorkExpreanceDetails.ExperienceThree", b =>
                {
                    b.HasOne("EfCoreRelation.Entity.WorkExpreanceDetails.WorkExperience", "workExperience")
                        .WithMany("experienceThrees")
                        .HasForeignKey("WorkExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("workExperience");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.WorkExpreanceDetails.ExperienceTwo", b =>
                {
                    b.HasOne("EfCoreRelation.Entity.WorkExpreanceDetails.WorkExperience", "workExperience")
                        .WithMany("experienceTwos")
                        .HasForeignKey("WorkExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("workExperience");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.WorkExpreanceDetails.WorkExperience", b =>
                {
                    b.HasOne("EfCoreRelation.Entity.Employees.Employee", "employee")
                        .WithMany("workExperiences")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.AccademicQualificationDetails.AccademicQualification", b =>
                {
                    b.Navigation("acQualifOnes");

                    b.Navigation("acQualifThrees");

                    b.Navigation("acQualifTwos");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.Address.EmployeeAddress", b =>
                {
                    b.Navigation("parmanentAddresses");

                    b.Navigation("presentAddresses");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.Employees.Employee", b =>
                {
                    b.Navigation("accademicQualifications");

                    b.Navigation("employeeAddresses");

                    b.Navigation("workExperiences");
                });

            modelBuilder.Entity("EfCoreRelation.Entity.WorkExpreanceDetails.WorkExperience", b =>
                {
                    b.Navigation("experienceFives");

                    b.Navigation("experienceFours");

                    b.Navigation("experienceOnes");

                    b.Navigation("experienceThrees");

                    b.Navigation("experienceTwos");
                });
#pragma warning restore 612, 618
        }
    }
}
